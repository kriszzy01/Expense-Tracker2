{"version":3,"sources":["redux/slices/TransactionSlice.js","components/TransactionToggle.js","components/FormInput.js","components/TransactionForm.js","components/SubHeading.js","utils/currency.js","components/TransactionBalance.js","components/TransactionHistory.js","App.js","redux/store.js","index.js"],"names":["transactionAdapter","createEntityAdapter","initialState","getInitialState","isIncome","transactionSlice","createSlice","name","reducers","addTransaction","reducer","state","payload","addOne","prepare","title","amount","id","Date","getSeconds","removeTransaction","removeOne","toggleTransaction","actions","transaction","getSelectors","selectAllTransactions","selectAll","selectById","TransactionToggle","useSelector","isInc","dispatch","useDispatch","onClick","type","className","FormInput","forwardRef","ref","value","onInputChange","label","placeholder","htmlFor","onChange","required","TransactionForm","useState","setTitle","setAmount","notNumber","setNotNumber","inputRef","useRef","onSubmit","event","preventDefault","transactionAmount","Number","current","focus","target","test","SubHeading","children","level","Tag","currency","Intl","NumberFormat","style","format","TransactionBalance","allTransactions","balance","reduce","prev","next","income","filter","expense","toFixed","TransactionHistory","listItem","map","key","handleRemoveTransaction","String","includes","length","App","transactionReducer","store","configureStore","render","document","querySelector"],"mappings":"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","file":"static/js/main.760facb6.chunk.js","sourcesContent":["import { createSlice, createEntityAdapter } from \"@reduxjs/toolkit\";\r\n\r\nconst transactionAdapter = createEntityAdapter();\r\n\r\nexport const initialState = transactionAdapter.getInitialState({\r\n    isIncome: true,\r\n});\r\n\r\nconst transactionSlice = createSlice({\r\n    name: \"transaction\",\r\n    initialState,\r\n    reducers: {\r\n        addTransaction: {\r\n            reducer(state, payload) {\r\n                transactionAdapter.addOne(state, payload)\r\n            },\r\n            prepare(title, amount) {\r\n                return {\r\n                    payload: {\r\n                        id: `${title}${new Date().getSeconds()}`,\r\n                        amount,\r\n                        title\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        removeTransaction: {\r\n            reducer(state, payload) {\r\n                transactionAdapter.removeOne(state, payload)\r\n            },\r\n            prepare(id) {\r\n                return {\r\n                    payload: id\r\n                }\r\n            } \r\n        },\r\n        toggleTransaction: {\r\n            reducer(state) {\r\n                state.isIncome = !state.isIncome;\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nexport default transactionSlice.reducer; //Transaction Reducer\r\nexport const {\r\n    addTransaction, \r\n    removeTransaction, \r\n    toggleTransaction\r\n} = transactionSlice.actions; //Actions\r\n\r\nexport const isIncome = state => state.transaction.isIncome; \r\nexport const {\r\n    selectAll: selectAllTransactions,\r\n    selectById: selectTransactionById\r\n} = transactionAdapter.getSelectors(state => state.transaction);","import React from \"react\";\r\nimport { isIncome as isInc} from \"../redux/slices/TransactionSlice\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { toggleTransaction } from \"../redux/slices/TransactionSlice\";\r\n\r\nexport const TransactionToggle = () => {\r\n    const isIncome = useSelector(isInc);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleToggle = () => dispatch(toggleTransaction());\r\n\r\n    return (\r\n        <button \r\n            onClick={handleToggle} \r\n            type=\"button\" \r\n            className={`toggle-button | radius ${isIncome ? \"| bg-tertiary\": \"| bg-secondary\"}`}>\r\n                {isIncome ? \"Income\" : \"Expense\"}\r\n        </button>\r\n    );\r\n};","import React, { forwardRef } from \"react\";\r\nimport { TransactionToggle } from \"./TransactionToggle\";\r\n\r\nexport const FormInput = forwardRef(({ type = \"text\", id, value, onInputChange, label, placeholder }, ref) => {\r\n\r\n    return (\r\n        <div>\r\n            <label htmlFor={id} className=\"splitter\">\r\n                <span>{label}</span>\r\n                {id === \"amount\" && <TransactionToggle />}\r\n            </label>\r\n\r\n            <input\r\n                type={type}\r\n                id={id}\r\n                value={value}\r\n                onChange={onInputChange}\r\n                ref={ref}\r\n                placeholder={placeholder}\r\n                required\r\n            />\r\n        </div>\r\n    );\r\n}); ","import React, { useState, useRef } from \"react\";\r\nimport { FormInput } from \"./FormInput\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTransaction } from \"../redux/slices/TransactionSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { isIncome as isInc } from \"../redux/slices/TransactionSlice\";\r\n\r\nexport const TransactionForm = () => {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [amount, setAmount] = useState(\"\");\r\n    const [notNumber, setNotNumber] = useState(false);\r\n\r\n    const isIncome = useSelector(isInc);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onTitleChange = event => setTitle(event.target.value);\r\n\r\n    const onAmountChange = event => {\r\n        const numberRegex = /^[0-9]*$/gm;\r\n\r\n        if (numberRegex.test(event.target.value)) {\r\n            setNotNumber(false);\r\n            setAmount(event.target.value);\r\n        } else {\r\n            setNotNumber(true);\r\n        }\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        const transactionAmount = isIncome ? Number(`${amount}`) : Number(`-${amount}`);\r\n\r\n        if (amount !== \"\" && title !== \"\") {\r\n            dispatch(addTransaction(title, transactionAmount));\r\n        }\r\n\r\n        setAmount(\"\");\r\n        setTitle(\"\");\r\n\r\n        inputRef.current.focus();\r\n        setNotNumber(false);\r\n    };\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"form | flow\">\r\n            <FormInput\r\n                id=\"title\"\r\n                value={title}\r\n                onInputChange={onTitleChange}\r\n                label=\"Transaction Name\"\r\n                ref={inputRef}\r\n                placeholder=\"Enter Transaction Name...\"\r\n            />\r\n\r\n            <FormInput\r\n                id=\"amount\"\r\n                value={amount}\r\n                onInputChange={onAmountChange}\r\n                label=\"Amount\"\r\n                placeholder=\"Enter Amount...\"\r\n            />\r\n            \r\n            <button type=\"submit\" className=\"bg-primary\">Add Transaction</button>\r\n            <p className=\"instructions\">\r\n                {!notNumber ?\r\n                    \"Toggle Transaction Type by clicking Income-Expense Button\":\r\n                    \"Amount must be a Number\"\r\n                }\r\n            </p>\r\n        </form>\r\n    );\r\n};","import React from \"react\";\r\n\r\nexport const SubHeading = ({children, level=1}) => {\r\n    const Tag = `h${level}`\r\n\r\n    return(\r\n        <>\r\n            <Tag>{children}</Tag>\r\n            {level === \"2\" && <hr></hr>}\r\n        </>\r\n    );\r\n};","export const currency = (amount) => \r\n    new Intl.NumberFormat(\r\n        \"en-US\", \r\n        {style: \"currency\", currency: \"USD\"}\r\n    ).format(amount);","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectAllTransactions } from \"../redux/slices/TransactionSlice\";\r\nimport { SubHeading } from \"./SubHeading\";\r\nimport { currency } from \"../utils/currency\";\r\n\r\nexport const TransactionBalance = () => {\r\n    const allTransactions = useSelector(selectAllTransactions);\r\n\r\n    const balance = allTransactions.reduce((prev, next) => prev + next.amount, 0);\r\n\r\n    const income = allTransactions\r\n        .filter((transaction) => transaction.amount > 0)\r\n        .reduce((prev, next) => prev + next.amount, 0);\r\n\r\n    const expense = allTransactions\r\n        .filter((transaction) => transaction.amount < 1)\r\n        .reduce((prev, next) => prev + next.amount, 0);\r\n\r\n\r\n    return (\r\n        <>\r\n            <SubHeading level=\"3\">Your Balance: {currency(balance.toFixed(2))}</SubHeading>\r\n            <dl className=\"splitter | bg-neutral gap-top-300\">\r\n                <div>\r\n                    <dt>Income</dt>\r\n                    <dd>{currency(income.toFixed(2))}</dd>\r\n                </div>\r\n                <div>\r\n                    <dt>Expenses</dt>\r\n                    <dd>{currency(expense.toFixed(2))}</dd>\r\n                </div>\r\n            </dl>\r\n        </>\r\n    );\r\n};","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectAllTransactions, removeTransaction } from \"../redux/slices/TransactionSlice\";\r\nimport { currency } from \"../utils/currency\";\r\n\r\nexport const TransactionHistory = () => {\r\n    const allTransactions = useSelector(selectAllTransactions);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleRemoveTransaction = id => dispatch(removeTransaction(id))\r\n\r\n    const listItem = allTransactions.map(transaction => {\r\n        const { title, amount, id } = transaction;\r\n\r\n        return (\r\n            <li\r\n                key={id}\r\n                onClick={() => handleRemoveTransaction(id)}\r\n                className={`${String(amount).includes(\"-\") ? \"expense\" : \"income\"} | splitter | bg-neutral`}>\r\n                    <span>{title}</span>\r\n                    <span>{currency(amount)}</span>\r\n            </li>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <p className=\"instructions | gap-top-300\">\r\n                {allTransactions.length === 0\r\n                    ? \"No Transaction to Display\"\r\n                    : \"Click on Transaction to Delete\"}\r\n            </p>\r\n            <ul className=\"history | gap-top-300\">{listItem}</ul>\r\n        </>\r\n    );\r\n};","import React from \"react\";\r\nimport { TransactionForm } from \"./components/TransactionForm\";\r\nimport { SubHeading } from \"./components/SubHeading\";\r\nimport { TransactionBalance } from \"./components/TransactionBalance\"\r\nimport { TransactionHistory } from \"./components/TransactionHistory\";\r\n\r\nexport const App = () => {\r\n    return (\r\n        <>\r\n            <header className=\"center wrapper\">\r\n                <SubHeading>Expense Tracker</SubHeading>\r\n            </header>\r\n\r\n            <main className=\"wrapper switcher\">\r\n                <section className=\"gap-top-500\">\r\n                    <SubHeading level=\"2\">\r\n                        Add New Transaction\r\n                    </SubHeading>\r\n                    <TransactionForm />\r\n                </section>\r\n\r\n                <section className=\"gap-top-500\">\r\n                    <SubHeading level=\"2\">Transaction Balance</SubHeading>\r\n                    <TransactionBalance />\r\n                </section>\r\n\r\n                <section className=\"gap-top-500\">\r\n                    <SubHeading level=\"2\">Transaction History</SubHeading>\r\n                    <TransactionHistory />\r\n                </section>\r\n            </main>\r\n\r\n            <footer className=\"wrapper\"></footer>\r\n        </>\r\n    );\r\n};","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport transactionReducer from \"./slices/TransactionSlice\";\r\n\r\nconst reducers = {\r\n    transaction: transactionReducer,\r\n};\r\n\r\nexport const store = configureStore({\r\n    reducer: reducers,\r\n});","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { App } from \"./App\";\r\nimport { store } from \"./redux/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport \"./styles/index.scss\";\r\n\r\nrender(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.querySelector(\"#root\")\r\n);"],"sourceRoot":""}